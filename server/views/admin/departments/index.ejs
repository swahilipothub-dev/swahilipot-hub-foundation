<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Departments</h1>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addDepartmentModal">
            <i class="fas fa-plus me-2"></i> Add Department
        </button>
    </div>

    <!-- Departments Table -->
    <div class="card">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="departmentsTableBody">
                        <!-- Will be populated by JavaScript -->
                        <tr>
                            <td colspan="5" class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="d-flex justify-content-between align-items-center p-3 border-top">
                <div class="text-muted">
                    Showing <span id="showingFrom" class="fw-semibold">0</span> to 
                    <span id="showingTo" class="fw-semibold">0</span> of 
                    <span id="totalItems" class="fw-semibold">0</span> entries
                </div>
                <nav>
                    <ul class="pagination pagination-sm mb-0" id="pagination">
                        <!-- Will be populated by JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Add Department Modal -->
<div class="modal fade" id="addDepartmentModal" tabindex="-1" aria-labelledby="addDepartmentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="addDepartmentForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="addDepartmentModalLabel">Add New Department</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="departmentName" class="form-label">Department Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="departmentName" name="name" required placeholder="e.g., Computer Science">
                        <div class="form-text">Must be unique across all departments</div>
                    </div>
                    <div class="mb-3">
                        <label for="departmentDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="departmentDescription" name="description" rows="3" placeholder="Brief description of the department"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Department</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Department Modal -->
<div class="modal fade" id="editDepartmentModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="editDepartmentForm">
                <input type="hidden" id="editDepartmentId" name="id">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Department</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editDepartmentName" class="form-label">Department Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="editDepartmentName" name="name" required placeholder="e.g., Computer Science">
                        <div class="form-text">Must be unique across all departments</div>
                    </div>
                    <div class="mb-3">
                        <label for="editDepartmentDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editDepartmentDescription" name="description" rows="3" placeholder="Brief description of the department"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteDepartmentModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the department <strong id="deleteDepartmentName"></strong>?</p>
                <p class="text-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Warning: This action cannot be undone and will affect all associated records.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete Department</button>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript for Departments Page -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize DataTable and modals
        const departmentsTable = document.getElementById('departmentsTableBody');
        const addDepartmentForm = document.getElementById('addDepartmentForm');
        const editDepartmentForm = document.getElementById('editDepartmentForm');
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteDepartmentModal'));
        let currentPage = 1;
        const itemsPerPage = 10;
        let departments = [];
        let departmentToDelete = null;

        // Fetch departments from API
        async function fetchDepartments() {
            try {
                const response = await fetch('/api/admin/departments');
                
                if (response.status === 401) {
                    // If unauthorized, redirect to login
                    window.location.href = '/login';
                    return;
                }
                
                if (!response.ok) {
                    const error = await response.json().catch(() => ({}));
                    throw new Error(error.message || 'Failed to fetch departments');
                }
                
                departments = await response.json();
                renderDepartments();
                renderPagination();
            } catch (error) {
                console.error('Error fetching departments:', error);
                showAlert('danger', error.message || 'Failed to load departments. Please try again.');
                
                // If it's an auth error, redirect to login
                if (error.message.includes('unauthorized') || error.message.includes('token')) {
                    window.location.href = '/login';
                }
            }
        }

        // Render departments in the table
        function renderDepartments() {
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const paginatedItems = departments.slice(start, end);

            if (paginatedItems.length === 0) {
                departmentsTable.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center py-4">
                            <div class="text-muted">No departments found</div>
                            <button class="btn btn-sm btn-outline-primary mt-2" data-bs-toggle="modal" data-bs-target="#addDepartmentModal">
                                <i class="fas fa-plus me-1"></i> Add Department
                            </button>
                        </td>
                    </tr>`;
                return;
            }

            departmentsTable.innerHTML = paginatedItems.map(dept => `
                <tr>
                    <td>
                        <div class="fw-semibold">${escapeHtml(dept.name)}</div>
                        <small class="text-muted">ID: ${dept._id}</small>
                    </td>
                    <td class="text-truncate" style="max-width: 300px;" title="${escapeHtml(dept.description || '')}">
                        ${dept.description ? escapeHtml(dept.description) : '<span class="text-muted">No description</span>'}
                    </td>
                    <td>${new Date(dept.createdAt).toLocaleDateString()}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-link text-primary edit-btn" data-id="${dept._id}" title="Edit">
                                <i class="far fa-edit"></i>
                            </button>
                            <button class="btn btn-link text-danger delete-btn" data-id="${dept._id}" title="Delete">
                                <i class="far fa-trash-alt"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');

            // Add event listeners to action buttons
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', () => handleEdit(btn.dataset.id));
            });

            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', () => handleDeleteClick(btn.dataset.id));
            });

            // Update pagination info
            document.getElementById('showingFrom').textContent = start + 1;
            document.getElementById('showingTo').textContent = Math.min(end, departments.length);
            document.getElementById('totalItems').textContent = departments.length;
        }

        // Render pagination controls
        function renderPagination() {
            const totalPages = Math.ceil(departments.length / itemsPerPage);
            const pagination = document.getElementById('pagination');
            
            if (totalPages <= 1) {
                pagination.innerHTML = '';
                return;
            }

            let paginationHTML = `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>`;

            for (let i = 1; i <= totalPages; i++) {
                paginationHTML += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>`;
            }

            paginationHTML += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>`;

            pagination.innerHTML = paginationHTML;

            // Add event listeners to pagination links
            document.querySelectorAll('.page-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (link.closest('.disabled')) return;
                    currentPage = parseInt(link.dataset.page);
                    renderDepartments();
                    renderPagination();
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
            });
        }

        // Handle edit button click
        async function handleEdit(departmentId) {
            try {
                const response = await fetch(`/api/admin/departments/${departmentId}`);
                if (!response.ok) throw new Error('Failed to fetch department');
                const department = await response.json();
                
                // Populate edit form
                document.getElementById('editDepartmentId').value = department._id;
                document.getElementById('editDepartmentName').value = department.name;
                document.getElementById('editDepartmentCode').value = department.code;
                document.getElementById('editDepartmentDescription').value = department.description || '';
                document.getElementById('editIsActive').checked = department.is_active !== false;
                
                // Show edit modal
                const editModal = new bootstrap.Modal(document.getElementById('editDepartmentModal'));
                editModal.show();
            } catch (error) {
                console.error('Error fetching department:', error);
                showAlert('danger', 'Failed to load department details. Please try again.');
            }
        }

        // Handle delete button click
        function handleDeleteClick(departmentId) {
            const department = departments.find(d => d._id === departmentId);
            if (!department) return;
            
            departmentToDelete = departmentId;
            document.getElementById('deleteDepartmentName').textContent = department.name;
            deleteModal.show();
        }

        // Handle form submission for adding a new department
        addDepartmentForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('departmentName').value.trim(),
                description: document.getElementById('departmentDescription').value.trim()
            };

            try {
                const response = await fetch('/api/admin/departments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Failed to add department');
                }

                // Close modal and reset form
                const modal = bootstrap.Modal.getInstance(document.getElementById('addDepartmentModal'));
                modal.hide();
                addDepartmentForm.reset();
                
                // Refresh department list
                await fetchDepartments();
                showAlert('success', 'Department added successfully!');
            } catch (error) {
                console.error('Error adding department:', error);
                showAlert('danger', error.message || 'Failed to add department. Please try again.');
            }
        });

        // Handle form submission for editing a department
        editDepartmentForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const departmentId = document.getElementById('editDepartmentId').value;
            const formData = {
                name: document.getElementById('editDepartmentName').value.trim(),
                description: document.getElementById('editDepartmentDescription').value.trim()
            };

            try {
                const response = await fetch(`/api/admin/departments/${departmentId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Failed to update department');
                }

                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('editDepartmentModal'));
                modal.hide();
                
                // Refresh department list
                await fetchDepartments();
                showAlert('success', 'Department updated successfully!');
            } catch (error) {
                console.error('Error updating department:', error);
                showAlert('danger', error.message || 'Failed to update department. Please try again.');
            }
        });

        // Handle department deletion
        document.getElementById('confirmDelete').addEventListener('click', async () => {
            if (!departmentToDelete) return;

            try {
                const response = await fetch(`/api/admin/departments/${departmentToDelete}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Failed to delete department');
                }

                // Close modal
                deleteModal.hide();
                
                // Refresh department list
                await fetchDepartments();
                showAlert('success', 'Department deleted successfully!');
            } catch (error) {
                console.error('Error deleting department:', error);
                showAlert('danger', error.message || 'Failed to delete department. Please try again.');
            } finally {
                departmentToDelete = null;
            }
        });

        // Helper function to show alerts
        function showAlert(type, message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
            alertDiv.role = 'alert';
            alertDiv.style.zIndex = '1100';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const alert = bootstrap.Alert.getOrCreateInstance(alertDiv);
                alert.close();
            }, 5000);
        }

        // Helper function to escape HTML
        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Initialize the page
        fetchDepartments();
    });
</script>
